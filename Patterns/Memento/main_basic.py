#------------------------------------------------------------------------------
# Memento | Behavioral Design Pattern
#------------------------------------------------------------------------------
#
# The Mememto Pattern lets you save and restore an object's internal state
# without revealing the details of its implementation.
#
# - Many programmatic issues are caused by broken encapsulation when objects
#   try to do moe than they are supposed to. They invade the private space of
#   other objects to collect the data required to perform some action rather
#   than let these objects perform the action.
# - The Memento pattern delegates creating state snapshots to the owner of the
#   state (the originator object) since it has full access to its own state.
# - Pythons 'pickle' module implements binary protocols for serializing and
#   deserializing an Python object structure. The pickle data format uses a
#   relatively compact binary representation of a python object and is data
#   that can be further compressed.
# - Note that the pickle module is not secure and only trusted data should
#   be unpickled as its possible to construct picked data which executes
#   arbitrary code during unpickling. In addition, the pickletools module
#   contains tools for analyzing data streams generated by pickle.
# - In comparison to JSON: JSON is a text serialization format, is human
#   readable, is interoperable outside of Python, can only represent a
#   subset of the Python built-in types, and is not vulnerable to code
#   excution on deserialization. Pickle is a binary serialization format,
#   not human readable, supports and extremely large number of Python types
#   and is only usable in Python.
#

import pickle


class Originator:
    """
    Create a memento containing a snapshot of its current internal state.
    Use the memento to restore its internal state.
    """

    def __init__(self):
        self._state = None

    def set_memento(self, memento):
        previous_state = pickle.loads(memento)
        vars(self).clear()
        vars(self).update(previous_state)

    def create_memento(self):
        return pickle.dumps(vars(self))

#------------------------------------------------------------------------------
# Client Code


def main():
    originator = Originator()
    print("Current State: {}".format(originator._state))

    memento = originator.create_memento()

    originator._state = True
    print("Changed State: {}".format(originator._state))

    originator.set_memento(memento)
    print("Restored State: {}".format(originator._state))


if __name__ == "__main__":
    main()
